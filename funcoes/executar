from pybricks.hubs import PrimeHub
from pybricks.pupdevices import Motor, ColorSensor
from pybricks.parameters import Port, Stop
from pybricks.tools import wait, StopWatch
from pybricks.parameters import Axis

hub = PrimeHub(observe_channels=[125])



sensor_esquerdo = ColorSensor(Port.C)
sensor_direito = ColorSensor(Port.A)
sensoraux = ColorSensor(Port.E)
mt = Motor(Port.F)
me = Motor(Port.D)
md = Motor(Port.B)


LIMIAR_PRETO = 30
PPP = 35
PP = 50
VELOCIDADE_BASE = 170
VELOCIDADE_ALTA = 450


# PARA MOTOR
def parar_motor():
    """Função para parar todos os motores."""
    me.stop()
    md.stop()
    mt.stop()


# VER DOIS PRETOS
def executar_preto():
    print("É PRETO — Executando lógica normal de interseção preta")
    parar_motor()
    wait(00)
    testtsensor()
    wait(500)
    parar_motor()
    wait(50)
    mov()
    wait(10)
    print("DEU CERTO")

# RECUAR
def recuadinha():
    velocidade = 100
    tempo = 700

    stopwatch = StopWatch()
    
    md.run(-velocidade)
    mt.run(-velocidade)
   
    while stopwatch.time() < tempo:
        pass
    md.stop()
    mt.stop()

# GIRAR
def girar(velocidade, tempo):

    stopwatch = StopWatch()
    
    # Inicia os motores ao mesmo tempo
    md.run(velocidade)  # Motor Direito
    me.run(velocidade)  # Motor Esquerdo
   
    # Motor traseiro auxilia na rotação
    mt.run(velocidade)  
    
    # Aguarda até que o tempo especificado tenha passado
    while stopwatch.time() < tempo:
        pass  # Aguarda até o tempo passar (sem bloquear outras execuções)

    # Após o tempo, para o movimento
    parar_motor()

    wait(100)  # Pequeno atraso para estabilizar

# DEFINIR VELOCIDADE
def definir_velocidade(motor, velocidade):
    """Define a velocidade de um motor específico."""
    motor.run(velocidade)


# MOVER PARA FRENTE
def mover_para_frente():
    velocidade = 250  # Velocidade dos motores
    tempo = 12500  # Tempo de movimento em milissegundos (simulando millis())

    # Iniciando o cronômetro
    stopwatch = StopWatch()
    
    # Inicia os motores ao mesmo tempo
    md.run(velocidade)  # Motor Direito
    me.run(-velocidade)  # Motor Esquerdo
   
    
    # Aguarda até que o tempo especificado tenha passado
    while stopwatch.time() < tempo:
        pass  # Aguarda até o tempo passar (sem bloquear outras execuções)

    # Após o tempo, para o movimento
    md.stop()
    me.stop()


# MOVER PRA FRENTE FRENTE 
def mpf_preto():
    velocidade = 100  # Velocidade dos motores
    tempo = 1780  # Tempo de movimento em milissegundos (simulando millis())

    # Iniciando o cronômetro
    stopwatch = StopWatch()
    
    # Inicia os motores ao mesmo tempo
    md.run(velocidade)  # Motor Direito
    me.run(-velocidade)  # Motor Esquerdo
   
    
    # Aguarda até que o tempo especificado tenha passado
    while stopwatch.time() < tempo:
        pass  # Aguarda até o tempo passar (sem bloquear outras execuções)

    # Após o tempo, para o movimento
    md.stop()
    me.stop()


# SEGUIR LINHA
def seguir_linha():
    """Função principal para seguir a linha."""
    
    while True:
            # Lê a inclinação do robô (pitch e roll)
        pitch, _ = hub.imu.tilt()

        # if viuobs:
        #     print("OBSTÁCULO DETECTADO! Recuando e desviando...")
        # # Recuar um pouco
        #     me.run(200)
        #     md.run(200)
        #     mt.run(200)
        #     wait(800)
        #     parar_motor()
        #     wait(100)

        #     # Virar para a direita levemente
        #     me.run(-150)
        #     md.run(150)
        #     mt.run(0)
        #     wait(700)
        #     parar_motor()
        #     wait(100)

        #     # Avançar um pouco para contornar
        #     me.run(-200)
        #     md.run(200)
        #     mt.run(200)
        #     wait(1000)
        #     parar_motor()

        # # Imprime a arfagem (pitch) no console
        # # print("Arfagem (pitch):", pitch)

        # Decide a velocidade com base na inclinação
        if pitch < -15:
            print("SUBINDOOOOOO")
            if se > LIMIAR_PRETO and sd > LIMIAR_PRETO:
                md.run(250)
                me.run(-250)
                mt.run(0)
                wait(2000)    

            # Curva para direita
            elif se > LIMIAR_PRETO and sd <= LIMIAR_PRETO:
                definir_velocidade(md, -200)
                definir_velocidade(me, -290)
                mt.run(-495)

            # Curva para esquerda
            elif se <= LIMIAR_PRETO and sd > LIMIAR_PRETO:
                definir_velocidade(me, 200)
                definir_velocidade(md, 290)
                mt.run(495)
        else:
            VELOCIDADE_BASE = 160  # volta ao normal